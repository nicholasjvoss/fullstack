{
  "_args": [
    [
      {
        "raw": "jws@^3.1.5",
        "scope": null,
        "escapedName": "jws",
        "name": "jws",
        "rawSpec": "^3.1.5",
        "spec": ">=3.1.5 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\nicho\\Documents\\dev\\fullstack\\node_modules\\jsonwebtoken"
    ]
  ],
  "_from": "jws@^3.1.5",
  "_hasShrinkwrap": false,
  "_id": "jws@3.2.1",
  "_location": "/jws",
  "_nodeVersion": "8.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jws_3.2.1_1548597157601_0.25617724445426715"
  },
  "_npmUser": {
    "name": "omsmith",
    "email": "owen@omsmith.ca"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jws@^3.1.5",
    "scope": null,
    "escapedName": "jws",
    "name": "jws",
    "rawSpec": "^3.1.5",
    "spec": ">=3.1.5 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jsonwebtoken"
  ],
  "_resolved": "https://registry.npmjs.org/jws/-/jws-3.2.1.tgz",
  "_shasum": "d79d4216a62c9afa0a3d5e8b5356d75abdeb2be5",
  "_shrinkwrap": null,
  "_spec": "jws@^3.1.5",
  "_where": "C:\\Users\\nicho\\Documents\\dev\\fullstack\\node_modules\\jsonwebtoken",
  "author": {
    "name": "Brian J Brennan"
  },
  "bugs": {
    "url": "https://github.com/brianloveswords/node-jws/issues"
  },
  "dependencies": {
    "jwa": "^1.2.0",
    "safe-buffer": "^5.0.1"
  },
  "description": "Implementation of JSON Web Signatures",
  "devDependencies": {
    "semver": "^5.1.0",
    "tape": "~2.14.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-bGA2omSrFUkd72dhh05bIAN832znP4wOU3lfuXtRBuGTbsmNmDXMQg28f0Vsxaxgk4myF5YkKQpz6qeRpMgX9g==",
    "shasum": "d79d4216a62c9afa0a3d5e8b5356d75abdeb2be5",
    "tarball": "https://registry.npmjs.org/jws/-/jws-3.2.1.tgz",
    "fileCount": 9,
    "unpackedSize": 17682,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcTbemCRA9TVsSAnZWagAAwgMP/2BojRvzLmvfP74ZfH/U\nAUUG5kll1OaAQ8JskDFuPtjTf35Yn1HRp5mkUJdWPbc1w/9BKCFAdTID4UkT\nhOI1NdFQ5yeXEEG/rTcDsnpbaIzFK+jRQM3t2A5kHDkpsjAbgsRNVhQW3695\nDIh9na7AKoI6WInxl+FZ4tgEcbGVJJGpkGYBZcEpcjiHDMxZ44lh2Jbn0NP7\nQZ34YwBj185F43ImDFXG4kBR1gHfjVlNS88MyOOd4n4FoxNLsd8AOBE5bIN7\n51P7/6TdD+TrTft/yxAby9wK4PL8Wrb2OnNl+tF9jEtF+Ztao7jg8OS/PDdk\nbUFM9FVgSka4NUPYrgnrZRtfoOaXcFB1psjrX43zInaSv3drv6T8wCr9XBhj\nezaMGIVtj4kK9f6B8kvG/a2fqKrcG3y8u5MoQ+0k+bmB09dW3e34ca8D9JSI\nEkEGvwa4Qx7dQUxF6/lnrXL7INmLRl0Eo0pOuGthq79ss87YS4nuy3jxiepc\nBosk9imcAuolIXtt/pAfGGh2yyV7emjT2IKAAlGrEyy3nl6wT76CQd26XnMa\naiyqJ32zOX2g8+HT7X61AcCMWtMi5G9tJFa9mRvNnAVCsCMUHLtw7Hc2VfFc\nYS1U6v5ibe9/3P7wi0kTOkd5Od/AtcHTDAklF7ICoPOdREkyvOFxJgkG6kYc\nSl7H\r\n=zRiv\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "c0f6b27bcea5a2ad2e304d91c2e842e4076a6b03",
  "homepage": "https://github.com/brianloveswords/node-jws#readme",
  "keywords": [
    "jws",
    "json",
    "web",
    "signatures"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "brianloveswords",
      "email": "brianloveswords@gmail.com"
    },
    {
      "name": "omsmith",
      "email": "owen@omsmith.ca"
    },
    {
      "name": "stenington",
      "email": "mikelarssonftw@gmail.com"
    }
  ],
  "name": "jws",
  "optionalDependencies": {},
  "readme": "# node-jws [![Build Status](https://secure.travis-ci.org/brianloveswords/node-jws.png)](http://travis-ci.org/brianloveswords/node-jws)\n\nAn implementation of [JSON Web Signatures](http://self-issued.info/docs/draft-ietf-jose-json-web-signature.html).\n\nThis was developed against `draft-ietf-jose-json-web-signature-08` and\nimplements the entire spec **except** X.509 Certificate Chain\nsigning/verifying (patches welcome).\n\nThere are both synchronous (`jws.sign`, `jws.verify`) and streaming\n(`jws.createSign`, `jws.createVerify`) APIs.\n\n# Install\n\n```bash\n$ npm install jws\n```\n\n# Usage\n\n## jws.ALGORITHMS\n\nArray of supported algorithms. The following algorithms are currently supported.\n\nalg Parameter Value | Digital Signature or MAC Algorithm\n----------------|----------------------------\nHS256 | HMAC using SHA-256 hash algorithm\nHS384 | HMAC using SHA-384 hash algorithm\nHS512 | HMAC using SHA-512 hash algorithm\nRS256 | RSASSA using SHA-256 hash algorithm\nRS384 | RSASSA using SHA-384 hash algorithm\nRS512 | RSASSA using SHA-512 hash algorithm\nPS256 | RSASSA-PSS using SHA-256 hash algorithm\nPS384 | RSASSA-PSS using SHA-384 hash algorithm\nPS512 | RSASSA-PSS using SHA-512 hash algorithm\nES256 | ECDSA using P-256 curve and SHA-256 hash algorithm\nES384 | ECDSA using P-384 curve and SHA-384 hash algorithm\nES512 | ECDSA using P-521 curve and SHA-512 hash algorithm\nnone | No digital signature or MAC value included\n\n## jws.sign(options)\n\n(Synchronous) Return a JSON Web Signature for a header and a payload.\n\nOptions:\n\n* `header`\n* `payload`\n* `secret` or `privateKey`\n* `encoding` (Optional, defaults to 'utf8')\n\n`header` must be an object with an `alg` property. `header.alg` must be\none a value found in `jws.ALGORITHMS`. See above for a table of\nsupported algorithms.\n\nIf `payload` is not a buffer or a string, it will be coerced into a string\nusing `JSON.stringify`.\n\nExample\n\n```js\nconst signature = jws.sign({\n  header: { alg: 'HS256' },\n  payload: 'h. jon benjamin',\n  secret: 'has a van',\n});\n```\n\n## jws.verify(signature, algorithm, secretOrKey)\n\n(Synchronous) Returns `true` or `false` for whether a signature matches a\nsecret or key.\n\n`signature` is a JWS Signature. `header.alg` must be a value found in `jws.ALGORITHMS`.\nSee above for a table of supported algorithms. `secretOrKey` is a string or\nbuffer containing either the secret for HMAC algorithms, or the PEM\nencoded public key for RSA and ECDSA.\n\nNote that the `\"alg\"` value from the signature header is ignored.\n\n\n## jws.decode(signature)\n\n(Synchronous) Returns the decoded header, decoded payload, and signature\nparts of the JWS Signature.\n\nReturns an object with three properties, e.g.\n```js\n{ header: { alg: 'HS256' },\n  payload: 'h. jon benjamin',\n  signature: 'YOWPewyGHKu4Y_0M_vtlEnNlqmFOclqp4Hy6hVHfFT4'\n}\n```\n\n## jws.createSign(options)\n\nReturns a new SignStream object.\n\nOptions:\n\n* `header` (required)\n* `payload`\n* `key` || `privateKey` || `secret`\n* `encoding` (Optional, defaults to 'utf8')\n\nOther than `header`, all options expect a string or a buffer when the\nvalue is known ahead of time, or a stream for convenience.\n`key`/`privateKey`/`secret` may also be an object when using an encrypted\nprivate key, see the [crypto documentation][encrypted-key-docs].\n\nExample:\n\n```js\n\n// This...\njws.createSign({\n  header: { alg: 'RS256' },\n  privateKey: privateKeyStream,\n  payload: payloadStream,\n}).on('done', function(signature) {\n  // ...\n});\n\n// is equivalent to this:\nconst signer = jws.createSign({\n  header: { alg: 'RS256' },\n});\nprivateKeyStream.pipe(signer.privateKey);\npayloadStream.pipe(signer.payload);\nsigner.on('done', function(signature) {\n  // ...\n});\n```\n\n## jws.createVerify(options)\n\nReturns a new VerifyStream object.\n\nOptions:\n\n* `signature`\n* `algorithm`\n* `key` || `publicKey` || `secret`\n* `encoding` (Optional, defaults to 'utf8')\n\nAll options expect a string or a buffer when the value is known ahead of\ntime, or a stream for convenience.\n\nExample:\n\n```js\n\n// This...\njws.createVerify({\n  publicKey: pubKeyStream,\n  signature: sigStream,\n}).on('done', function(verified, obj) {\n  // ...\n});\n\n// is equivilant to this:\nconst verifier = jws.createVerify();\npubKeyStream.pipe(verifier.publicKey);\nsigStream.pipe(verifier.signature);\nverifier.on('done', function(verified, obj) {\n  // ...\n});\n```\n\n## Class: SignStream\n\nA `Readable Stream` that emits a single data event (the calculated\nsignature) when done.\n\n### Event: 'done'\n`function (signature) { }`\n\n### signer.payload\n\nA `Writable Stream` that expects the JWS payload. Do *not* use if you\npassed a `payload` option to the constructor.\n\nExample:\n\n```js\npayloadStream.pipe(signer.payload);\n```\n\n### signer.secret<br>signer.key<br>signer.privateKey\n\nA `Writable Stream`. Expects the JWS secret for HMAC, or the privateKey\nfor ECDSA and RSA. Do *not* use if you passed a `secret` or `key` option\nto the constructor.\n\nExample:\n\n```js\nprivateKeyStream.pipe(signer.privateKey);\n```\n\n## Class: VerifyStream\n\nThis is a `Readable Stream` that emits a single data event, the result\nof whether or not that signature was valid.\n\n### Event: 'done'\n`function (valid, obj) { }`\n\n`valid` is a boolean for whether or not the signature is valid.\n\n### verifier.signature\n\nA `Writable Stream` that expects a JWS Signature. Do *not* use if you\npassed a `signature` option to the constructor.\n\n### verifier.secret<br>verifier.key<br>verifier.publicKey\n\nA `Writable Stream` that expects a public key or secret. Do *not* use if you\npassed a `key` or `secret` option to the constructor.\n\n# TODO\n\n* It feels like there should be some convenience options/APIs for\n  defining the algorithm rather than having to define a header object\n  with `{ alg: 'ES512' }` or whatever every time.\n\n* X.509 support, ugh\n\n# License\n\nMIT\n\n```\nCopyright (c) 2013-2015 Brian J. Brennan\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n[encrypted-key-docs]: https://nodejs.org/api/crypto.html#crypto_sign_sign_private_key_output_format\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/brianloveswords/node-jws.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "3.2.1"
}
